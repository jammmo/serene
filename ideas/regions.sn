// Potential implementation of the Region and Handle system as a standard library module
// Assume that array is variable length

// needs to be an Optional type


type Handle(type MyRegion) with
~ friend Region
~ struct {
    index: int private
}


type Region with
~ constructor(type T) {
    set self.array = Array(T)
    type Region = Region(typeof self)
}
~ struct {
    array: Array(T) private,
}
~ specifics {
    method add(NewValue: type T) -> Region {
        run array.append(NewValue)
        const handle = Handle()
        return handle
    }

    method delete(IndexToDelete: Handle) {
        run array.pop!(IndexToDelete)
    }

    subscript get(MyHandle: Handle) -> Handle {
        return array[MyHandle.index]
    }
}

// Note that all T's here are the same. Need a better way to make that clear...


// Which to use?
type Handle = something()
const Handle: type = something()