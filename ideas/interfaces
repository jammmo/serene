import AddressModule;

interface Card with
- struct {
    returnAddress: String
}

interface Invitation with
- struct {
    date: String,
    location: Address,
    numGuests: Int,
    accepted: Bool
}

- signatures {
    method send(recipient: Person),
    method accept(guests: Int)
}

type WeddingInvitation with
- struct {
    bride: String,
    groom: String,
    struct from Invitation,
    struct from Card
}

- specifics (implements Invitation) {
    method send(recipient: Person) {
        recipient.receive(copy self);
    }

    method accept(guests: Int) {
        self.accepted = True;
    }

    method parseLocation(address: String) from AddressModule;
}



// Older example

interface CompareAndIndex(self: type X) {
    method lessThan(other: X) -> bool;
    method greaterThan(other: X) -> bool;

    self[index: int] -> Option(X);
}

//or for regular functions

interface CompareAndIndex(self: type X) {
    function lessThan(self: X, other: X) -> bool;
    function greaterThan(self: X, other: X) -> bool;

    self[index: int] -> Option(X);
}



implement CompareAndIndex(self: Array(int)) {
    method lessThan(other: Array(int)) {
        for (i in 0 .. min(self.length, other.length)) {
            if (self[i] != other[i]) {
                return self[i] < other[i];
            }
        }
        return self.length < other.length;
    }

    method lessThan(other: Array(int)) {
        for (i in 0 .. min(self.length, other.length)) {
            if (self[i] != other[i]) {
                return self[i] > other[i];
            }
        }
        return self.length > other.length;
    }

    self[index: int] from Index(self: Array(type X));
}