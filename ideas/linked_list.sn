type Node(type N) is struct {
    data: int,
    next: N,
}

type LinkedList with
~ struct {
    nodes: Pool(Node),
    Noodle: Type private,
    head: Noodle,
}

~ constructor(first: int) {
    set self.nodes = Pool(Node)
    set self.Noodle = nodes.Noodle
    set self.head = nodes.add!(Node(first, None))
}

~ specifics {
    method addFirst(a: int) {
        set self.head = nodes.add!(Node(a, self.head))
    }

    method addLast(a: int) {
        if (self.head == None) {
            set self.head = nodes.add!(Node(a, None))
        }
        else {
            let x = nodes[self.head]
            while (x.next != None) {
                set x = nodes[x.next]
            }
            set x.next = nodes.add!(Node(a, None))
        }
    }

    method deleteFirst() {
        if (self.head == None) return
        let x = self.head
        set self.head = nodes[self.head].next
        run nodes.delete!(x)
    }

    method deleteLast() {
        if (self.head == None) return
        let x = nodes[self.head]
        while (x.next != None) {
            set x = nodes[x.next]
        }
        run nodes.delete!(x)
    }
}