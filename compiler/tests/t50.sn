function compareY(a: Y, b: Y) on (type Y) -> Bool {
    return a < b
}

function popAndPass(mutate vec: Vector of X) on (type X) {
    const last = vec.pop!()
    const second_last = vec.pop!()

    print compareY(second_last, last)
}

function addOneAndPass(mutate times: Int64, s: T of Int64) on (type T) {
    set times += 1
    run printAfter50(mutate times, s)
}

function printAfter50(mutate times: Int64, s: T of Int64) on (type T) {
    if times >= 50 {
        print s
    } else {
        run addOneAndPass(mutate times, s)
    }
}

function main() {
    var myInts: Vector = [7, 2, 4, 5, 6]
    var myFloats: Vector = [1.3, 2.75, 9.0, 8.7]

    run popAndPass(mutate myInts)
    run popAndPass(mutate myFloats)

    var myFloatsBad: Array = [1.3, 2.75, 9.0, 8.7]
    var myBoolsBad: Vector = [True, False, False, False, True]

    // run popAndPass(mutate myFloatsBad)  // should not compile
    // run popAndPass(mutate myBoolsBad)   // should not compile (Bools are not currently comparable)

    var count = 0
    run printAfter50(mutate count, [1, 2, 3] as Array)

    set count = 0
    run printAfter50(mutate count, [-2.1, -4.2, -6.3] as Vector)
}