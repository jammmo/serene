type Pair struct {
    x: Int64, 
    y: Int64,
}

function addOne(mutate x: Int64) -> Int64 {
    set x = x + 1
    return 0
}

function discard(move x: Int64) -> Int64 {
    return 0
}

function mut_and_return(mutate x: Pair) -> Pair {
    set x.x = 5
    return x    // This line should not compile
}

function main() {
    var m: Int64 = 100
    var n: Int64 = 200

    var u: Int64 = 1
    var v: Int64 = 1

// Test for field access
    var a: Pair = Pair(4, 39)

    // This should compile
    set m = addOne(mutate a.x) + addOne(mutate a.y)

    // This should not compile
    //set m = discard(move a.x)


// Test for index access
    var c = Vector(1, 2, 3)

    // This should not compile
    //set n = addOne(mutate c[u]) + addOne(mutate c[u])
    //set n = addOne(mutate c[u]) + addOne(mutate c[v])

    // For consistency reasons, this should not compile either, even though it doesn't cause any issues with shared mutability
    //set n = addOne(mutate c[0]) + addOne(mutate c[1]) + addOne(mutate c[2])
}