// consumes a character array and returns it as a string
function charArrayToString(move u: Array{Char}) -> String {
    var s = ""
    for (x in u) {
        run s.append!(x)
    }
    return s
}

function main() {
    var a = Array('I', 't', ' ', 'w', 'o', 'r', 'k', 's', '!')
    print charArrayToString(move a)
}

// These should not compile (for scoping/mutability reasons, though there may also be other reasons)
// function charArrayToString(move u: Array{Char}) -> String {
//     const s = ""
//     for (x in u) {
//         run s.append!(x)
//     }
//     return s
// }

// function charArrayToString(move u: Array{Char}) -> String {
//     var s = ""
//     for (x in u) {
//         run s.append!(mutate x)
//     }
//     return s
// }

// function charArrayToString(move u: Array{Char}) -> String {
//     var s = ""
//     for (x in u) {
//         run s.append!(mutate x[0].hello.world)
//     }
//     return s
// }

// function charArrayToString(move u: Array{Char}) -> String {
//     const s = ""
//     for (x in u) {
//         run ((((s[0]).a[2])))[1].append!(x)
//     }
//     return s
// }


// Something like 'run s.append!(mutate s)' should never compile.
// Variables should only be able to pass themselves as 'look' or 'copy' to non-mutating methods, and only as 'copy' to mutating methods.
