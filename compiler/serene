#!/usr/bin/env python

from __future__ import print_function
import sys

def printerr(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

if sys.version_info < (3, 6):
    printerr("Needs Python 3.6 or later.")
    exit(1)

import subprocess
import argparse
from pathlib import Path
import shutil

if shutil.which('raku') is None:
    printerr("Raku must be installed.")
    exit(1)

if shutil.which('g++') is None:
    printerr("g++ must be installed.")
    exit(1)

parser = argparse.ArgumentParser('Compile a Serene program.')
parser.add_argument('INPUT', type=str, help='path to file containing Serene code')
parser.add_argument('-p', '--parse', help='parse only; does not generate C++ code', action='store_true')
parser.add_argument('-o', '--output', type=str, help='name of C++ source code')

args = parser.parse_args()

if args.output:
    if args.parse:
        printerr("Options -p and -o cannot be used together.")
        exit(1)
    
    output_type = 'o'
elif args.parse:
    printerr('Parsing', args.INPUT, 'now...')
    output_type = 'p'
else:
    printerr('Compiling', args.INPUT, 'now...')
    output_type = 'c'

# Run Raku-based parser
completed_process = subprocess.run(['raku', 'parser.raku', args.INPUT], capture_output=True, text=True)
printerr(completed_process.stderr, end='')

if completed_process.returncode == 0:
    if output_type == 'p':  # Parse only
        printerr(completed_process.stdout, end='')
    else:
        printerr('Running compile.py now...')
        printerr()

        import compile

        if output_type == 'c':  # Compile and print generated code to stdout; no files modified
            cpp_code = compile.main(completed_process.stdout)
            print(cpp_code, end='')
        else:                   # Compile and save generated code to a C++ file
            output_path = Path('.') / Path(args.output)
            if output_path.is_dir():
                printerr('Invalid output file name.')
                exit(1)
            try:
                output_path = output_path.parent.resolve(strict=True) / output_path.name
            except FileNotFoundError:
                printerr('Invalid output directory.')
                exit(1)
            if output_path.suffix not in ('.cc', '.cpp'):
                printerr('Invalid output file name.')
                exit(1)

            cpp_code = compile.main(completed_process.stdout)
            with open(output_path, 'w') as file:
                file.write(cpp_code)
            printerr("Saved output to file", output_path)
else:
    exit(1)
