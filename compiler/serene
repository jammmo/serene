#!/usr/bin/env python

from __future__ import print_function
import sys
import shutil

from src.common import *

# Check basic requirements
if sys.version_info < (3, 6):
    printerr("Needs Python 3.6 or later.")
    exit(1)

if shutil.which('raku') is None:
    printerr("Raku must be installed.")
    exit(1)

if shutil.which('g++') is None:
    printerr("g++ must be installed.")
    exit(1)


import subprocess
import argparse
from pathlib import Path

parser = argparse.ArgumentParser('Compile a Serene program.')
parser.add_argument('INPUT', type=str, help='path to file containing Serene code')
parser.add_argument('-p', '--parse', help='parse only; does not generate C++ code', action='store_true')
parser.add_argument('-o', '--output', type=str, help='name of C++ source code')

args = parser.parse_args()

if args.output:
    if args.parse:
        printerr("Options -p and -o cannot be used together.")
        exit(1)

    printerr('Compiling', args.INPUT, 'now...')    
    output_type = 'o'
elif args.parse:
    printerr('Parsing', args.INPUT, 'now...')
    output_type = 'p'
else:
    printerr('Compiling', args.INPUT, 'now...')
    output_type = 'c'

# Directory of this file ( /serene/compiler/ )
here = Path(__file__).parent.resolve()

# Run Raku-based parser
source_path = Path(args.INPUT).resolve()
if source_path.is_file():
    completed_process = subprocess.run(['raku', 'src/parser.raku', source_path], cwd=here, capture_output=True, text=True)
    printerr(completed_process.stderr, end='')
else:
    printerr("File", args.INPUT, "does not exist.")
    exit(1)

if completed_process.returncode == 0:
    if output_type == 'p':  # Parse only
        printerr(completed_process.stdout, end='')
    else:
        printerr('Running compile.py now...')
        printerr()

        from src import compile

        if output_type == 'c':  # Compile and print generated C++ code to stdout; no files modified
            cpp_code = compile.main(completed_process.stdout, include_path=source_path.parent)
            print(cpp_code, end='')
        else:                   # Compile and save generated code to a temporary C++ file, then use g++ to compile to binary
            output_path = Path('.') / Path(args.output)     # Path('.') is the directory where the program is run, not the directory of the program itself
            if output_path.is_dir():
                printerr('Invalid output file name.')
                exit(1)
            try:
                output_path = output_path.parent.resolve(strict=True) / output_path.name
            except FileNotFoundError:
                printerr('Invalid output directory.')
                exit(1)
            if output_path.suffix != '':
                printerr('Invalid output file name.')
                exit(1)

            cpp_code = compile.main(completed_process.stdout, include_path=source_path.parent)
            with open(here / Path('temp/generated.cc'), 'w') as file:
                file.write(cpp_code)

            gcc_completed_process = subprocess.run(['g++', '-std=c++17', './temp/generated.cc', '-o', './temp/compiled'], cwd=here, stderr=subprocess.DEVNULL)
            if gcc_completed_process.returncode == 0:
                if (here / Path('temp/compiled')).is_file():
                    shutil.copy2(here / Path('temp/compiled'), output_path)
                    printerr("Saved output to file", output_path)
                elif (here / Path('temp/compiled.exe')).is_file():
                    shutil.copy2(here / Path('temp/compiled.exe'), output_path.with_suffix('.exe'))
                    printerr("Saved output to file", output_path.with_suffix('.exe'))
                else:
                    printerr('Error compiling to temporary directory.')
                    exit(1)
            else:
                printerr(f"g++ compiler failed with error code {gcc_completed_process.returncode}.")
                exit(1)
else:
    exit(1)
