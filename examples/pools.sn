// Potential implementation of the Pool and Noodle system as a standard library module
// Assume that array is variable length

// needs to be an Optional type


type Noodle with
~ friend Pool
~ constructor('MyPool) {

}
~ struct {
    index: int private
}


type Pool with
~ constructor('Type) {
    set self.array = Array('Type)
}
~ struct {
    noodle: Noodle(typeof self),
    array: Array('Type) private,
}
~ specifics {
    method add(NewValue: 'Type) -> self.noodle {
        self.array.append(NewValue)
        new noodle = Noodle()
        return noodle
    }

    method delete(IndexToDelete: self.noodle) {
        self.array.pop(IndexToDelete)
    }

    subscript get(MyNoodle: self.noodle) -> self.noodle {
        return self.array[MyNoodle.index]
    }
}